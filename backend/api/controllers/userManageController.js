import db from "../config/db.js";

// ===== Xem danh s√°ch t·∫•t c·∫£ user (ch·ªâ admin) =====
export const getAllUsers = async (req, res) => {
  try {
    const [rows] = await db.query(
      "SELECT UserID, Email, FullName, Phone, Address, Role, Status, CreatedAt FROM users"
    );
    res.json(rows);
  } catch (err) {
    console.error("L·ªói getAllUsers:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
};

// ===== Xem th√¥ng tin user hi·ªán t·∫°i =====
export const getUserById = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id; 

    // N·∫øu kh√¥ng ph·∫£i admin v√† kh√¥ng ph·∫£i ch√≠nh m√¨nh => ch·∫∑n
    if (req.user.role !== "admin" && userId !== parseInt(id)) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng th·ªÉ xem t√†i kho·∫£n ng∆∞·ªùi kh√°c!" });
    }

    const [rows] = await db.query("SELECT UserID, Email, FullName, Phone, Address, Role, Status FROM users WHERE UserID = ?", [id]);
    if (rows.length === 0) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
    res.json(rows[0]);
  } catch (err) {
    console.error(" L·ªói getUserById:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
};

// ===== S·ª≠a th√¥ng tin user (ch·ªâ user t·ª± s·ª≠a m√¨nh) =====
export const updateUser = async (req, res) => {
  try {
    const { id } = req.params;
    const { fullName, phone, address } = req.body;
    const userId = req.user.id;

    // Ch·ªâ cho ph√©p s·ª≠a n·∫øu l√† ch√≠nh m√¨nh
    if (req.user.role !== "admin" && userId !== parseInt(id)) {
      return res.status(403).json({ message: "B·∫°n ch·ªâ c√≥ th·ªÉ s·ª≠a t√†i kho·∫£n c·ªßa m√¨nh." });
    }

    const [result] = await db.query(
      "UPDATE users SET FullName = ?, Phone = ?, Address = ?, UpdatedAt = NOW() WHERE UserID = ?",
      [fullName, phone, address, id]
    );

    if (result.affectedRows === 0) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
    res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!" });
  } catch (err) {
    console.error("L·ªói updateUser:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
};

// ===== Xo√° user (ch·ªâ user t·ª± xo√° m√¨nh) =====
export const deleteUser = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id;

    if (req.user.role !== "admin" && userId !== parseInt(id)) {
      return res.status(403).json({ message: "B·∫°n ch·ªâ c√≥ th·ªÉ xo√° t√†i kho·∫£n c·ªßa m√¨nh." });
    }

    await db.query("DELETE FROM users WHERE UserID = ?", [id]);
    res.json({ message: "Xo√° t√†i kho·∫£n th√†nh c√¥ng!" });
  } catch (err) {
    console.error("L·ªói deleteUser:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
};
// PUT /api/users/:id/status
export const updateUserStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { Status } = req.body;

    // Ch·ªâ ch·∫•p nh·∫≠n gi√° tr·ªã 0 ho·∫∑c 1
    if (Status !== 0 && Status !== 1) {
      return res.status(400).json({ message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá." });
    }

    await db.query("UPDATE users SET Status = ? WHERE UserID = ?", [Status, id]);

    res.json({ message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi d√πng th√†nh c√¥ng!" });
  } catch (err) {
    console.error("üî• L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß." });
  }
};
